<?xml version="1.0" encoding="UTF-8"?>
<!-- Configures the Camel Context -->

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:camel="http://camel.apache.org/schema/spring"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">
	<bean id="xsltEnricherBean"
		class="com.attunedlabs.integrationfwk.activities.bean.XsltEnricher" />
	<bean id="ftlEnricherBean"
		class="com.attunedlabs.integrationfwk.activities.bean.FtlEnricher" />
	<bean id="jdbcIntActivityBean"
		class="com.attunedlabs.integrationfwk.activities.bean.JdbcIntActivity" />
	<bean id="jdbcCassandraIntActivityBean"
		class="com.attunedlabs.integrationfwk.activities.bean.JDBCIntActivityCassandra" />
	<bean id="filterPipelineActivity"
		class="com.attunedlabs.integrationfwk.activities.bean.FilterPipelineActivityProcessor" />
	<bean id="eventPublishActivityBean"
		class="com.attunedlabs.integrationfwk.activities.bean.EventPublishActivityProcessor" />
	<bean id="pipelineRouteDecider"
		class="com.attunedlabs.leap.integrationpipeline.IntegrationPipelineRouteDecider" />
	<bean id="emailnotifier"
		class="com.attunedlabs.integrationfwk.activities.bean.EmailNotifier" />
	<bean id="putExchangeToLeap"
		class="com.attunedlabs.leap.integrationpipeline.EmailPipeLineUtil" />
	<bean id="setRouteInHeader"
		class="com.attunedlabs.integrationfwk.activities.bean.RouteActivity" />
	<bean id="leapConfigUtil" class="com.attunedlabs.leap.util.LeapConfigurationUtil" />
	<bean id="propertyEnricherBean"
		class="com.attunedlabs.integrationfwk.activities.bean.PropertiesActivityEnricher" />
	<bean id="pipelineExchangeInitializer"
		class="com.attunedlabs.integrationfwk.activities.bean.PipelineExchangeInitializer" />
	<bean id="executePipelineInitBean"
		class="com.attunedlabs.integrationfwk.pipeline.service.PipelineExecutionInitializer" />
	<bean id="groovyScriptProcessorBean"
		class="com.attunedlabs.integrationfwk.activities.bean.GroovyScriptProcessor" />
	<bean id="conditionalFlowActivityProcessorBean"
		class="com.attunedlabs.integrationfwk.activities.bean.ConditionalFlowActivityProcessor" />
	<bean id="loopActivityProcessor"
		class="com.attunedlabs.integrationfwk.activities.bean.LoopActivityProcessor" />
	<bean id="leapHeaderCloneProcessor" class="com.attunedlabs.leap.LeapHeaderCloneProcessor" />

	<routeContext xmlns="http://camel.apache.org/schema/spring"
		id="enricherContext">
		<camel:route>
			<camel:from uri="direct:pipeactivity" />
			<to uri="bean:computeTime?method=process" />
			<to uri="bean:pipelineExchangeInitializer?method=processPipelineInit" />
			<log message="After Initialization of configuration Bean being called" />
			<to uri="bean:pipelineRouteDecider?method=processAllPipeActivity" />
			<camel:to uri="direct:pipeActivity" />
			<to uri="bean:computeTime?method=processEndTime" />
		</camel:route>

		<route id="pipeExecution">
			<from uri="direct:pipeActivity" />
			<to uri="bean:pipelineRouteDecider?method=loadPipeActivity" />
			<log message="input body for the pipeExecution : ${body}" />
			<choice>
				<when>
					<simple>${in.header.pipeactivity} != null</simple>
					<toD uri="direct:${in.header.routeDecider}" />
					<to uri="direct:pipeActivity" />
				</when>
				<otherwise>
					<log
						message="Exiting pipeExecution route since all pipeactivity is processed." />
				</otherwise>
			</choice>
		</route>
		<route id="xsltEnricherRoute">
			<from uri="direct:xsltEnricherRoute" />
			<log message="inside xsltEnricher" />
			<to uri="bean:xsltEnricherBean?method=processorBean" />
			<log message="the final response: ${body}" />
		</route>
		<route id="ftlEnricherRoute">
			<from uri="direct:ftlEnricherRoute" />
			<log message="inside ftlEnricherRoute" />
			<to uri="bean:ftlEnricherBean?method=processorBean" />
			<log message="the final response: ${body}" />
		</route>
		<!-- The logic is now available in leap-metaModel-jdbcIntActivity, #TODO 
			have to be cloned to the bean jdbcIntActivityBean -->
		<route id="jdbcIntMYSQLActivityRoute">
			<from uri="direct:jdbcIntMySQLActivityRoute" />
			<log message="inside jdbcIntActivityRoute" />
			<to uri="bean:jdbcIntActivityBean" />
			<!-- <to uri="bean:queryExecuter" /> -->
			<log message="the final response: ${body}" />
		</route>
		<route id="jdbcIntCassandraActivityRoute">
			<from uri="direct:jdbcIntCassandraActivityRoute" />
			<log message="inside jdbcIntActivityRoute" />
			<to uri="bean:jdbcCassandraIntActivityBean" />
			<!-- <to uri="bean:queryExecuter" /> -->
			<log message="the final response: ${body}" />
		</route>
		<route id="filterPipelineActivityRoute">
			<from uri="direct:filterPipelineRoute" />
			<log message="inside filterPipelineActivityRoute" />
			<to uri="bean:filterPipelineActivity?method=processAndFilterRequest" />
			<log message="the final response: ${body}" />
		</route>
		<route id="emailNotifyActivityRoute">
			<from uri="direct:emailNotifyActivityRoute" />
			<log message="inside emailNotifyActivityRoute" />
			<to uri="bean:emailnotifier?method=processor" />
			<to uri="bean:putExchangeToLeap?method=setExchangeBodyToLeapHeader" />
			<toD uri="${in.header.smtpEndpoint}" />
			<to uri="bean:putExchangeToLeap?method=getLeapHeaderToExchangeBody" />
			<log message="the final response: ${body}" />
		</route>
		<route id="camelRouteActivity">
			<from uri="direct:camelRouteActivity" />
			<log message="inside camelRouteActivity" />
			<to uri="bean:setRouteInHeader?method=routeDecidingActivity" />
			<to uri="bean:leapConfigUtil?method=setOldleapHeader" />
			<toD uri="${in.header.executionRoute}" />
			<to uri="bean:leapConfigUtil?method=getOldleapHeader" />
			<log message="the final response: ${body}" />
		</route>
		<route id="propertiesEnricherRoute">
			<from uri="direct:propertiesEnricherRoute" />
			<log message="inside propertiesEnricherRoute" />
			<to uri="bean:propertyEnricherBean?method=processorBean" />
			<log message="the final response: ${body}" />
		</route>
		<route id="groovyScriptActivityRoute">
			<from uri="direct:groovyScriptActivityRoute" />
			<log message="inside groovyScriptActivityRoute" />
			<to uri="bean:groovyScriptProcessorBean?method=processor" />
			<log message="the final response: ${body}" />
		</route>
		<route id="conditionalFlowActivityRoute">
			<from uri="direct:conditionalFlowActivityRoute" />
			<log message="inside conditionalFlowActivityRoute" />
			<to uri="bean:conditionalFlowActivityProcessorBean?method=processor" />
			<to uri="direct:pipelineServiceRoute" />
		</route>
		<route id="loopActivityRoute">
			<from uri="direct:loopActivityRoute" />
			<log message="inside loopActivityRoute" />
			<to uri="bean:loopActivityProcessor?method=processor" />
			<to uri="direct:loopActivityHelperRoute" />
			<log message="the final response loopActivityHelperRoute : ${body}" />
		</route>
		<route id="loopActivityHelperRoute">
			<from uri="direct:loopActivityHelperRoute" />
			<choice>
				<when>
					<header>parallelProcessing</header>
					<split onPrepareRef="leapHeaderCloneProcessor"
						parallelProcessing="true">
						<header>LoopRequestData</header>
						<log message="inside loopActivityHelperRoute with parallelProcessing" />
						<to uri="direct:pipelineServiceRoute" />
					</split>
				</when>
				<otherwise>
					<split onPrepareRef="leapHeaderCloneProcessor"
						parallelProcessing="false">
						<header>LoopRequestData</header>
						<log message="inside loopActivityHelperRoute without parallelProcessing" />
						<to uri="direct:pipelineServiceRoute" />
					</split>
				</otherwise>
			</choice>
			<removeHeader headerName="parallelProcessing" />
		</route>
		<route id="eventPublishRoute">
			<from uri="direct:eventPublishPipelineRoute" />
			<to uri="bean:eventPublishActivityBean?method=processPipelineEvent" />
		</route>
		<route id="pipelineServiceRoute">
			<from uri="direct:pipelineServiceRoute" />
			<to uri="bean:executePipelineInitBean?method=decidePipelineRoute" />
			<log message="executePipeline routing to ${in.header.executePipeline}" />
			<toD uri="direct:${in.header.executePipeline}" />
		</route>
		<route id="executePipelineRoute">
			<from uri="direct:executePipelineRoute" />
			<to uri="bean:executePipelineInitBean?method=processPipelineRequest" />
			<to
				uri="bean:getPipeConfigurationFromCache?method=loadPipeConfiguration(${in.header.pipelineName})" />
			<to uri="direct:pipeactivity" />
		</route>
		<route id="executeRequestPipelineRoute">
			<from uri="direct:executeRequestPipelineRoute" />
			<log message="inside direct:executeRequestPipelineRoute" />
			<to
				uri="bean:executePipelineInitBean?method=processPipelineConfigRequest" />
			<to uri="direct:pipeActivity" />
		</route>
	</routeContext>
</beans>