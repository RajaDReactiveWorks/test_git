<?xml version="1.0" encoding="UTF-8"?>
<!-- Configures the Camel Context -->

<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:camel="http://camel.apache.org/schema/blueprint"
	xmlns:tx="http://aries.apache.org/xmlns/transactions/v1.1.0"
	xsi:schemaLocation="
       http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
       http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd">

	<!-- Camel notifier bean declaralation -->
	<bean id="eventnotifier" class="com.attunedlabs.leap.notifier.LeapCamelEventNotifier"/>

	<!-- defining mysql datasource -->
	<bean id="vendorDatasource" class="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource">
		<property name="databaseName" value="leap" />
		<property name="url" value="jdbc:mysql://192.168.1.77:3306/leap" />
		<property name="user" value="root" />
		<property name="password" value="root" />
	</bean>
	
	
	<!-- attaching datasource defined above as XA-->
	<service interface="javax.sql.XADataSource" ref="vendorDatasource">
		<service-properties>
			<entry key="osgi.jndi.service.name" value="jdbc/vendmysqldb" />
			<entry key="datasource.name" value="leapMYSQL" />
			<entry key="aries.xa.pooling" value="true" />
			<entry key="aries.xa.poolMinSize" value="1" />
			<entry key="aries.xa.poolMaxSize" value="2" />
			<entry key="aries.xa.name" value="VendorDatasource" />
			<entry key="aries.xa.exceptionSorter" value="known" />
		</service-properties>
	</service>
	
	
	<!-- access through Spring's PlatformTransactionManager-->
	 <reference id="osgiPlatformTransactionManager" 
		interface="org.springframework.transaction.PlatformTransactionManager" /> 
		<!-- access through PlatformTransactionManager -->
	<reference id="osgiJtaTransactionManager" interface="javax.transaction.TransactionManager" />

	<!-- initializing transaction attribute -->
	<bean id="PROPAGATION_REQUIRED" class="org.apache.camel.spring.spi.SpringTransactionPolicy">
        <property name="transactionManager" ref="osgiPlatformTransactionManager"/>
    </bean>
    
    <!-- This bean is used to route to execution route -->
	<bean id="basedynamicExecution" class="com.attunedlabs.leap.base.LeapBaseRouting" />
	
	<!-- This bean is used to generated unique request id -->
	<bean id="requestIdGenrator" class="com.attunedlabs.leap.randomuuid.RandomStringUUID" />
	
	<!-- This bean is used to initialize leap header with request data -->
	<bean id="featureHeaderInit"
		class="com.attunedlabs.leap.header.initializer.FeatureHeaderInitializer">
		<property name="transactionManager" ref="osgiJtaTransactionManager" />
	</bean>
	
	<!-- This bean is used to transform data into the format understand by framework -->
	<bean id="dataTransform"
		class="com.attunedlabs.leap.transform.TransformData"/>
		
		
	<bean id="exceptionHandler"
		class="org.apache.camel.spring.spi.TransactionErrorHandlerBuilder">

	</bean>

	

	<!-- camelcontext start here -->
	<camelContext id="baseroute"
		xmlns="http://camel.apache.org/schema/blueprint">
		
		<!-- It is used to convert xmlToJson or JsonToXml -->
 	    <dataFormats>
			<xmljson id="xmljson" />
			<xmljson id="xmljsonWithOptions" forceTopLevelObject="true"
				trimSpaces="true" rootName="feature" skipNamespaces="true"
				removeNamespacePrefixes="true" expandableProperties="d e" />
		</dataFormats> 
	
	<!-- Rolling back the transaction when any of the exception occurred-->
		<onException>
			<exception>java.lang.Exception</exception>
			<handled>
				<constant>true</constant>
			</handled>
			<rollback markRollbackOnly="true" />
		</onException>

		<!-- This route takes json request data  -->
		<route id="rest-call">

			<!-- get data from rest call -->
			<from uri="restlet:http://0.0.0.0:9080/ecomm/json/{featuregroup}/{feature}/{servicetype}?restletMethod=post" />
			<from uri="direct-vm:baseEntry"/>
			<transacted ref="PROPAGATION_REQUIRED">

				<doTry>
					<!-- camel processor to process json data from request -->
					<to uri="bean:featureHeaderInit?method=process" />
					<!-- camel exchange exception -->
					<doCatch>
						<exception>org.apache.camel.CamelExchangeException</exception>
					</doCatch>					
				</doTry>
				<to uri="direct:entryroute" />
			</transacted>
		</route>
		
		<!-- This route takes xml based request data  -->
		<route id="rest-call-xml">
			<!-- get data from rest call -->
			<from
				uri="restlet:http://0.0.0.0:9090/ecomm/xml/{featuregroup}/{feature}/{servicetype}?restletMethod=post" />				
			 	<setHeader headerName="endpointType">
				<simple>HTTP-XML</simple>
				</setHeader>
				<to uri="direct-vm:baseEntry"/>
				<unmarshal ref="xmljsonWithOptions" />			 	
		</route>
		
		<!-- This route support GET/POST request of rest -->
		<route id="rest-get-post">
		<from uri="restlet:http://0.0.0.0:9060/ecomm/rest/{featuregroup}/{feature}/{servicetype}?restletMethods=get,post"/>
		<to uri="bean:dataTransform?method=transformRestRequestData"/>
		<to uri="direct-vm:baseEntry"/>
		</route>

		<!-- This is the first route to be called and generate unique request id,load bean which decide which execution route to call and call other routes-->
		<route id="entryRoute">
			<from uri="direct:entryroute" />
			<to uri="bean:requestIdGenrator?method=uuidgenrate" />
			<to uri="direct:basetransformation" />
			<to uri="bean:basedynamicExecution?method=route" />
			<toD uri="direct-vm:${in.header.exeroute}" />
		</route>
		
		<!-- This is base transformation route -->
		<route id="BaseTransformation">
			<from uri="direct:basetransformation" />
		</route>
		
		<!-- This is exit route which will be called at last -->
		<route id="ExitRoute">
			<from uri="direct:exitRoute" />
		</route>
	</camelContext>
</blueprint>
